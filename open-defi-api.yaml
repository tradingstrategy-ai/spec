openapi: 3.0.2
info:
  version: '0.1'

  title: Open DeFi API

  contact:
    email: mikko@tradingstrategy.ai
    url: 'https://tradingstrategy.ai/community'
  x-logo:
    url: 'https://raw.githubusercontent.com/tradingstrategy-ai/frontend/ec73a013cae04fa3f13c579dcc0dd0d80cbc49cc/src/lib/assets/logo-horizontal.svg'

  description: |

    Open DeFi API gives you access to decentralised exchange trading data, liquidity and tokens across multiple blockchains.
    For more information see [Trading Strategy](https://tradingstrategy.ai/) website.

    **This API is still in beta and subject to change**.

    ## Introduction

    This API offres to access to so-called on-chain trading activity. You can fetch live and historical
    trading data across different decentralised exchanges (DEXes)

    ## Use cases

    This data is useful e.g. for

    * Trading algorithms and bots

    * Market data websites

    * On-chain oracle data feeds

    * Blockchain research

    * Risk analysis

    ## Data availability

    Visit [Trading Strategy website](https://tradingstrategy.ai/trading-view) to explore available data.
    You can find supported blockchains and exchanges. Price candle chart is available for all trading pairs.
    Ultimately all blockchains will be supported, depending on the implementation order.

    ## Live and historical market data

    This API provides live data. However, these API endpoints have not been designed for large data ignestion.
    For backtesting trading strategies, [download the historical datasets from Trading Strategy website](https://tradingstrategy.ai/trading-view/backtesting).

    ## Market data categories

    You can find

    * Decentralised exchanges

    * Trading pairs

    * OHLCV price data for candle charts

    * OHLC liquidty data for liquidity maps

    ## Supported blockchains

    Examples of supported blockchains:

    * Ethereum mainnet

    * Binance Smart Chain

    * Polygon

    ## Supported exchanges

    Examples of supported exchanges:

    * [PancakeSwap](https://tradingstrategy.ai/trading-view/binance/pancakeswap-v2)
  
    * [Uniswap](https://tradingstrategy.ai/trading-view/ethereum/uniswap-v2)
    
    * SushiSwap

    * QuickSwap
    
    * Trader Joe

    ## About OpenAPI specification used

    This API specification is written in [OpenAPI v3](https://swagger.io/specification/).

    ## Documentation, support and questions
    
    * [Trading Strategy documentation](https://tradingstrategy.ai/docs/)
    
    * [Ask questions on Trading Strategy Discord server](https://tradingstrategy.ai/community)

externalDocs:
  description: Trading Strategy documentation
  url: 'https://tradingstrategy.ai/docs/'

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Blockchain
    description: Data about supported blockchains
  - name: Exchange
    description: Data about decentralised exchanges
  - name: Token
    description: Data about tokens living on blockchains
  - name: Trading pair
    description: Data about trading pair
  - name: Lending protocol
    description: Data about decentralized lending protocols
  - name: Trading signal
    description: Data about trading signals
  # Telemetry tag commented out, because its only ednpoitn /activity is commented out.
  # We do not publicly advertise that endpoint, and we do not want an empty tag group.
  #
  # - name: Telemetry
  #   description: |
  #     Storing events of interest pertaining to the TradingStrategy ecosystem,
  #     such as user iteractions with the charts on the website.

servers:
  - url: 'https://tradingstrategy.ai/api/'
  - url: 'http://localhost:3456/api/'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:

  '/chains':
    x-pyramid-route-name: web_chains
    get:
      operationId: web_chains
      summary: Return information on supported blockchains
      tags:
        - Blockchain
      responses: # list of responses
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: List of chain summmaries
                type: array
                items:
                  $ref: '#/components/schemas/ChainSummary'
        '404':
          description: chain not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/chain-details':
    x-pyramid-route-name: web_chain_details
    get:
      operationId: web_chain_details
      summary: Return information on a blockchain status
      tags:
        - Blockchain
      parameters:
        - name: chain_id
          in: query
          description: |
            Blockchain ID, e.g, `1` for Ethereum mainnet
          required: true
          schema:
            type: integer
          example: 1
        - name: chain_slug
          in: query
          description: |
            Blockchain slug, e.g, `ethereum` for Ethereum mainnet
            Note: if both `chain_id` and `chain_slug` are given, only `chain_id` will be used
          required: false
          schema:
            type: string
          example: ethereum

      responses: # list of responses
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChainDetails"
        '404':
          description: chain not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/health-check':
    x-pyramid-route-name: web_chain_health_check
    get:
      operationId: web_chain_health_check
      summary: |
        The blockchain data health check.
        
        Returns various diagnostics informtion on the chain indexing status.
        
        This is a slow endpoint and may take minutes to respond.
        It is only intended to be used in monitoring.
      tags:
        - Blockchain
      parameters:
        - name: chain_slug
          in: query
          description: |
            Blockchain slug, e.g, `ethereum` for Ethereum mainnet
          required: true
          schema:
            type: string
          example: ethereum

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  type: object
        '404':
          description: chain not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/exchanges':
    x-pyramid-route-name: web_exchanges
    get:
      operationId: web_exchanges
      summary: |

        List of available decentralised exchanges

        TODO: Currently pagination is not supported, but the result set should be fairly small (<2000)

      tags:
        - Exchange
      parameters:
        - name: chain_slug
          in: query
          description: |
            Blockchain slug, e.g, `ethereum` for Ethereum mainnet.

            If present, list exchanges only for this chain.
          required: false
          schema:
            type: string

        - name: address
          in: query
          description: |
            Get all DEX venues of a token by token contract address.

          required: false
          schema:
            type: string

        - name: sort
          in: query
          description: |

            What kind of sort options is available for the output.

            The default `usd_volume_30d` sorts the exchanges based on their monthly volume.

          required: false
          schema:
            type: string
            default: usd_volume_30d
            enum: [usd_volume_30d, pair_count]
        - name: direction
          in: query
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: filter_zero_volume
          in: query
          description: |
            When set, do not return exchanegs which have had no volume for last 30 days.

            This will speed up the response a bit, as most exchanges are ghost exchanges.
          required: false
          schema:
            type: boolean
            default: false

      responses: # list of responses
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeSummaryListing"

  '/exchange-details':
    x-pyramid-route-name: web_exchange_details
    get:
      operationId: web_exchange_details
      summary: Get data for one exchange to render the exchange page
      parameters:
        - name: exchange_slug
          in: query
          description: |
            Exchange path slug e.g, `sushiswap`
          required: true
          schema:
            type: string
        - name: chain_slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string
      tags:
        - Exchange
      responses: # list of responses
        '200':
          description: OK
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/ExchangeDetails'
        '404':
          description: Exchange not found - either chain or exchange slug does not match
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/pair-details':
    x-pyramid-route-name: web_pair_details
    get:
      operationId: web_pair_details
      summary: |
        Additional information for a trading pair
      parameters:
        - name: exchange_slug
          in: query
          description: |
            Exchange path slug e.g, `sushiswap`
          required: true
          schema:
            type: string
          example: sushiswap
        - name: chain_slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string
          example: ethereum
        - name: pair_slug
          in: query
          description: |

            Trading pair friendly presentation (token0 symbol - token1 symbol) or pair pool contract address.

            Symbols can be in any order: base token - quote token or quote token - base token.

            If multiple trading pairs match the same symbol the one with the highest volume is returned
            (assuming other trading pairs are ones with a fake token).

            Examples of accepted `pair_slugs`:
            - `ETH-USDC`
            - `eth-usdc`
            - `WETH-USDC`
            - `USDC-WETH`
            - `0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc`

            The response is a composite of pair summary information, additional trading volume numbers and related links.

          required: true
          schema:
            type: string
          example: ETH-USDC

      tags:
        - Trading pair
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairFullInfo'
        '404':
          description: Pair not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/pair-trade-data':
    x-pyramid-route-name: web_pair_trade_data
    get:
      operationId: web_pair_trade_data
      summary: |
        Key performance metrics of a trading pair for a given time window
      parameters:
        - name: pair_id
          in: query
          description: |

            Pair id as received in `/pairs` or `/pair-details`

            As the endpoint /pair-details is preferred, this endpoint only gives direct pair_id access for now.

          required: true
          schema:
            type: integer
          example: 1
        - name: period
          in: query
          description: |

            The time perid for the stats.

            Currently only latest stats are supported.

          required: true
          schema:
            type: string
            enum: [hourly, daily, weekly, monthly]
          example: hourly

      tags:
        - Trading pair
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSpanTradeData'
        '404':
          description: Pair not found or time bucket not suppoted
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/pairs':
    x-pyramid-route-name: web_pairs
    get:
      operationId: web_pairs
      summary: Query and filter trading pairs
      description: |

        Query different combinations of the trading pairs.

        The most common query is all trading pairs of a decentralised exchange.

        `/pairs?chain_slugs=ethereum&exchange-slugs=uniswap-v2`

        - Can return paginated JSON results for the frontend.
        
        - Can return Microsoft XLSX export of the data. In this case, always get the first 3000 entries.  

        ## Parameter seralisation

        Note that lists are not JSON serialised, but use [OpenAPI query parameter serialization](https://swagger.io/docs/specification/serialization/). I.e. lists are comma separated, no spaces between items.

      parameters:
        - name: exchange_slugs
          in: query
          description: Slugs for DEXes to look up
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - uniswap-v2
        - name: chain_slugs
          in: query
          description: Slugs for blockchain to look up
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - ethereum
        - name: token_addresses
          in: query
          style: form
          explode: false
          description: |
            For querying trading pairs for a specific token.

            For example, to get BUSD trading pairs on BNB chain,
            use the token address `0xe9e7cea3dedca5984780bafc599bd69add087d56`.
            This will give you all BUSD trading pairs.

            Multiple token addresses can be passed using OpenAPI form style array.

            For a specific token, the query must also include `chain_slugs` condition, as
            any a token may share the same address across multiple chains.

            Some tokens and their trading pairs exist in the database,
            but `trading pairs do not fulfill the tracking threshold <https://tradingstrategy.ai/docs/programming/tracking.html>`_.
            If you query a single such token address you will get an error, as a developer friendliness
            features. These are often "spam tokens". Example:

            ```shell
            curl "https://tradingstrategy.ai/api/pairs?token_addresses=0xccf31fd34a364a21ad32ad91b09f5071f7200a3d"
            ```

          required: false
          schema:
            type: array
            items:
              type: string
              format: address
        - name: page
          in: query
          description: Page number, zero-indexed
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: page_size
          in: query
          description: Limit number of pairs returned (default is 20)
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: |

            What kind of sort options are available for the list.

            The default `pair_id` sorting makes only sense for machine-to-machine actions.
            The recommended sort method is by descending volume (most interesting trading pairs first).

            Pairs with a missing sort property (NULL field value) are placed last.

          required: false
          schema:
            type: string
            default: pair_id
            minimum: 1
            maximum: 100
            enum: [pair_id, volume, volume_30d, price_change_24h, liquidity, liquidity_change_abs_24h, liquidity_change_relative_24h, tvl]
        - name: direction
          in: query
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter
          in: query
          description: |
            Filter the results based on liquidity.
            
            This allows exclude noisy micro cap trading pairs.
            
             * `unfiltered` - Returns everything within [the tracking rules](https://tradingstrategy.ai/docs/programming/tracking.html).
             * `min_liquidity_100k` - pairs with the current liquidity $100k  
             * `min_liquidity_1M` - pairs with the current liquidity $1M
          required: false
          schema:
            type: string
            enum: [unfiltered, min_liquidity_100k, min_liquidity_1M]
            default: min_liquidity_1M
        - name: eligible_only
          in: query
          description: |
             If true, omit pairs that do not match the "quality" criteria from results.
            
             For example, one of the criteria if a pair is eligible to be listed in the
             results is sufficient trading activity with the pair.
          required: false
          schema:
            type: boolean
            default: true
        - name: format
          in: query
          description: |
            Output format of the data.
            
             * `json` - return JSON data to be rendered in web frontend.  
             * `excel` - always limited to top 3000 results. Returns a downloadable file.
          required: false
          schema:
            type: string
            enum: [json, excel]
            default: json
      tags:
        - Trading pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPairSummary'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/trading-pair-data-availability':
    x-pyramid-route-name: web_trading_pair_data_availability
    get:
      operationId: web_trading_pair_data_availability
      summary:  Get the information from the oracle about the availability of the trading pair data
      description: |

        Fetch the latest updated timestamp for multiple trading pairs.
        
        Because Trading Strategy oracle does not generate empty candles in the case there are no trades,
        we need to have another mean to check if the server has up-to-date
        data where a Trading Strategy can take a decision on. This is to distinguish between the situation
        of data not yet updated and no data (no trades were made during the period).
        
        This endpoint gives you the result of trading pair data availability 
        for multiple pairs.

      parameters:
        - name: pair_ids
          in: query
          description: |

            Trading pair ids.

            Trading pair ids are not stable. Translate your trading pair symbolic tickers by using `/pair-details` endpoint
            before calling this API.
            
            The server has a maximum number of trading pairs it will serve in one request 
            and will give you an error if you try to ask too many trading pairs once.

          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
            uniqueItems: true

        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle time frame.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h

      tags:
        - Trading pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingPairDataAvailabilityList'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/candles':
    x-pyramid-route-name: web_candles
    get:
      operationId: web_candles
      summary: Get the candle stick chart data for one trading pair
      description: |

        Fetch candle data for selected trading pairs.

        You need to resolve the symbolic trading pair names to their internal IDs with
        `/pairs` or `/pair-details` to call this API endpoint.

        Candles are available for several different pair metrics and can be chosen by the
        `candle_type` parameter. Mind that some candle types may not support all possible
        time buckets, and time spans for which the data is available may differ.
        In addition, not all candle types contain additiona stats, and may only contain
        the base Open, High, Low, and Close values (+ candle timestamp).

        Candle response size is limited to 10,000 candles. Only the first 10,000 candles
        since the start timestamp are returned.

        [Inspired by Bitfinex API](https://docs.bitfinex.com/reference#rest-public-candles).

      parameters:
        - name: pair_ids
          in: query
          description: |

            Primary keys of the trading pairs to fetch the candles for. A maximum of 100
            IDs can be passed at a time.

          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
            minItems: 1
            maxItems: 100
            uniqueItems: true
          example: "12,6,171"

        - name: pair_id
          in: query
          description: |

            **WARNING:** Deprecated, use `pair_ids` instead. Will be removed in future
            API versions.

            Primary key for the trading pair.

            [You can grab any trading pair from Trading Strategy website](https://tradingstrategy.ai/trading-view/trading-pairs).
            The primary key is displayed in as internal id.

            Ignored if `pair_ids` parameter is also passed.

          required: false
          schema:
            type: integer
            minimum: 1
          example: 7
        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle size.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h
        - name: candle_type
          in: query
          description: |
            The pair metric to retrieve the candle data for. Normally the price (measured
            in the quote token), but other candle types are also supported.
          schema:
            type: string
            enum: [price, tvl]
            default: price
        - name: start
          in: query
          description: |

              When the candle fetch period starts.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.
              [Read more information about the time format](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).

              If not specific this will be resolved to now() - time_bucket * 100, or getting the last 100 candles.

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
          example: 2022-01-01
        - name: end
          in: query
          description: |

              When the candle fetch period ends.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.

              If not specific this will be resolved to now().

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
            minimum: 0
          example: 2022-01-02
        - name: exchange_type
          in: query
          description: Exchange type enum - see https://tradingstrategy.ai/docs/programming/api/client/help/tradingstrategy.exchange.ExchangeType.html
          required: false
          schema:
            type: string
          example: uniswap_v2

      tags:
        - Trading pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MultipairCandleList'
                  - $ref: '#/components/schemas/MultipairMinimalCandleList'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/candles-jsonl':
    x-pyramid-route-name: web_candles_jsonl
    get:
      operationId: web_candles_jsonl
      summary:

        Get the candle data for multiple trading pairs in JSONL format.

      description: |
        This is preferred method for getting OHLCV data if you need
        full historical data for small number od trading pairs. 
        There is very high limit on amount of data that can be fetched
        using this method.
      
        The response is [UTF-8 encoded JSON Lines](https://jsonlines.org/) streamed binary response.
        The size of the response cannot be known ahead of time.
        
        Candles are returned from the earliest to the latest.      
        If no start time is given, start from the genesis.
        
        The server has a byte limit for each response. This is controlled
        by `max_bytes` parameter. If the response reaches more than 
        `max_bytes` in length it is terminated with JSON object
        `{"error": true, "max_bytes_reached": served_bytes}`.
        The highest value, and response length, you can ask is 100M bytes.
        
        Because Trading Strategy oracle does not generate empty candles when there are no trades,
        you might want to distinguish no data yet available and no trade situations
        using `/trading-pair-data-availability` endpoint.
          
        **TODO**: Specify the actual per-line JSONL format in OpenAPI schema.
        
        An example code how to stream and decode JSONL OHLCV candles in Python: 
        
        ```
          """A sample script to download JSONL candle data.
          
          Request all historical data for
          
          - 15m candles
          
          - ETH/USDC
          
          - BNB/BUSD
          
          The download JSONL binary size is 28 Mbytes
          """
          
          import datetime
          from collections import defaultdict
          from io import StringIO
          
          import requests
          import jsonlines
          
          api_url = "https://tradingstrategy.ai/api"
          
          bnb_busd_params = {
              "chain_slug": "binance",
              "exchange_slug": "pancakeswap-v2",
              "pair_slug": "bnb-busd",
          }
          
          resp = requests.get(f"{api_url}/pair-details", bnb_busd_params)
          assert resp.status_code == 200, f"Got {resp.text}"
          
          bnb_busd = resp.json()
          
          print("Pair #1", bnb_busd["summary"]["pair_name"], bnb_busd["summary"]["pair_id"])
          
          eth_usdc_params = {
              "chain_slug": "ethereum",
              "exchange_slug": "uniswap-v2",
              "pair_slug": "eth-usdc",
          }
          
          resp = requests.get(f"{api_url}/pair-details", eth_usdc_params)
          assert resp.status_code == 200, f"Got {resp.text}"
          
          eth_usdc = resp.json()
          
          print("Pair #2", eth_usdc["summary"]["pair_name"], eth_usdc["summary"]["pair_id"])
          
          id_list = (eth_usdc["summary"]["pair_id"], bnb_busd["summary"]["pair_id"])
          
          params = {
              "pair_ids": ",".join(str(i) for i in id_list),
              "time_bucket": "15m",
          }
          
          # Iterate the resulting response
          # using jsonlines reader.
          # We start to decode incoming data on the first arrived byte
          # and keep decoding while streaming the response.
          # https://stackoverflow.com/a/60846477/315168
          print("Loading OHLCV data")
          resp = requests.get(f"{api_url}/candles-jsonl", params=params, stream=True)
          reader = jsonlines.Reader(resp.raw)
          
          print("Iterating response")
          candle_data = defaultdict(list)
          for item in reader:
              pair_id = item["p"]
              candle_data[pair_id].append(item)
          
          eth_usdc_candles = candle_data[eth_usdc["summary"]["pair_id"]]
          first_candle = datetime.datetime.utcfromtimestamp(eth_usdc_candles[0]["ts"])
          last_candle = datetime.datetime.utcfromtimestamp(eth_usdc_candles[-1]["ts"])
          bnb_busd_candles = candle_data[bnb_busd["summary"]["pair_id"]]
          
          print(f"ETH-USDC has {len(eth_usdc_candles):,} candles from {first_candle} to {last_candle}")
          print(f"BNB-BUSD has {len(bnb_busd_candles):,} candles")    
        ```
      parameters:
        - name: pair_ids
          in: query
          description: |

            Trading pair ids.

            Trading pair ids are not stable. Translate your trading pair symbolic tickers by using `/pair-details` endpoint
            before calling this API.
            
            The server has a maximum number of trading pairs it will serve in one request 
            and will give you an error if you try to ask too many trading pairs once.

          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
            uniqueItems: true

        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle size.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h
        - name: start
          in: query
          description: |

              When the candle fetch period starts.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.
              [Read more information about the time format](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).
      
              This range parameter is inclusive.
            
              If not given return all historical data starting from the genesis.

          required: false
          schema:
            type: string
            format: iso8601
          example: "1970-01-01"
        - name: end
          in: query
          description: |

              When the candle fetch period ends.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.

              If not specific this will be resolved to now().

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
            minimum: 0
          example: "2022-01-02"

        - name: max_bytes
          in: query
          description: |

             How many bytes to serve before the stream is terminated.

          required: false
          schema:
            type: integer
            maximum: 100000000
          example: 25000000

      tags:
        - Trading pair
      responses:
        "200":
          description: OK
          content:
            application/jsonl+json:
              schema:
                # https://stackoverflow.com/a/53339910/315168
                type: string
                format: binary
        "422":
          description: Something wrong with the input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/clmm-candles':
    x-pyramid-route-name: web_clmm_candles
    get:
      operationId: web_clmm_candles
      summary:

        Get Uniswap v3 concentrated liquidity market marking (CLMM) data for liquidity provider (LP) position backtesting.

      description: |
        
        This endpoint provides data for liquidity provider position backtesting.

        - Get the data for multiple trading pairs either JSONL or Parquet formats
        - Designed to be used with [Demeter](https://github.com/zelos-alpha/demeter/tree/master/demeter)
          backtesting framework, but can be used with others
        
        For usage
        - Demeter should be used with `1m` candles - these give enough granularity to give a good approximation
          of the LP strategy performance, with the trade off its much faster to simulate than fully accurate
          individual block level simulation
        - Use Parquet format if you are using Python 
        - Use JSONL if you indent to display the data in web frontend
        - Time buckets cap at `1d`
        - Only Uniswap v3 pair ids supported
        
        The response is streaming. Remember to use `requests.get(stream=True)` parameter. However
        you still need to store the full file on the disk before you can use `pd.read_parquet`.
        
        The response has a maximum site limit in bytes (`max_bytes`). If the response size
        exceeds this amount, the streaming is forcefully terminated and the resulting Parquet
        file is corrupted.
        
        Read more 
        
        - [CLMM](https://tradingstrategy.ai/glossary/clmm)
        - [Liquidity provider](https://tradingstrategy.ai/glossary/liquidity-provider)

      parameters:
        - name: pair_ids
          in: query
          description: |

            Trading pair ids.
            
            Pairs must belong to Uniswap v3 DEX.

            Trading pair ids are not stable. Translate your trading pair symbolic tickers by using `/pair-details` endpoint
            before calling this API.
            
            The server has a maximum number of trading pairs it will serve in one request 
            and will give you an error if you try to ask too many trading pairs once.

          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
            uniqueItems: true

        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle size.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d]
          example: 1h

        - name: format
          in: query
          description: >

            The output format of the data.
            
            Either JSONL or Parquet.
            
            - If not given use JSONL.
            - JSONL is designed for web frontends
            - Parquet is designed for Python consumption

          required: true
          schema:
            type: string
            enum: [jsonl, parquet]
          example: parquet

        - name: start
          in: query
          description: |

              When the candle fetch period starts.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.
              [Read more information about the time format](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).
      
              This range parameter is inclusive.
            
              If not given return all historical data starting from the genesis.

          required: false
          schema:
            type: string
            format: iso8601
          example: "1970-01-01"
        - name: end
          in: query
          description: |

              When the candle fetch period ends.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.

              If not specific this will be resolved to now().

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
            minimum: 0
          example: "2022-01-02"

        - name: max_bytes
          in: query
          description: |

             How many bytes to serve before the stream is terminated.

          required: false
          schema:
            type: integer
            maximum: 100000000
          example: 25000000

      tags:
        - Liquidity provision
      responses:
        "200":
          description: OK - return either JSONL or Parquet stream
          content:
            application/octet-stream:
              schema:
                # https://stackoverflow.com/a/53339910/315168
                type: string
                format: binary
        "422":
          description: Something wrong with the input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/xyliquidity':
    x-pyramid-route-name: web_xyliquidity
    get:
      operationId: web_xyliquidity
      summary: Get the XY liquidity chart data for selected pairs.
      description: |
        
        *Note*: This endpoint only works for Uniwap v2 liquidity data. For Uniswap v3 use `/candles` 
        endpoint.

        Fetch [XYLiquidity](https://tradingstrategy.ai/docs/programming/api/liquidity.html)
        data for selected trading pairs.

        You need to resolve the symbolic trading pair name to `pair_id` primary key with
        `/pairs` or `/pair-details` to call this API endpoint.

        If no candle data is found for a specific pair ID, the latter is omitted from
        the response.

        Liquidity sample response size is limited to 10,000 candles across all selected
        pairs. Only the oldest 10,000 candles since the start timestamp are returned.

      parameters:
        - name: pair_ids
          in: query
          description: |

            Primary keys of the trading pairs to fetch the data for. A maximum of 100
            IDs can be passed at a time.

          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
            minItems: 1
            maxItems: 100
            uniqueItems: true

        - name: pair_id
          in: query
          description: |

            **WARNING:** Deprecated, use `pair_ids` instead. Will be removed in future
            API versions.

            Primary key for the trading pair.

            [You can grab any trading pair from Trading Strategy website](https://tradingstrategy.ai/trading-view/trading-pairs).
            The primary key is displayed in as internal id.

            Ignored if `pair_ids` parameter is also passed.

          required: false
          schema:
            type: integer
            minimum: 1
        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle size.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h
        - name: start
          in: query
          description: |

              When the candle fetch period starts.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.
              [Read more information about the time format](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).

              If not specific this will be resolved to now() - time_bucket * 100, or getting the last 100 candles.

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
          example: 2022-01-01
        - name: end
          in: query
          description: |

              When the candle fetch period ends.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.

              If not specific this will be resolved to now().

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
            minimum: 0
          example: 2022-01-02
        - name: exchange_type
          in: query
          description: Exchange type enum - see https://tradingstrategy.ai/docs/programming/api/client/help/tradingstrategy.exchange.ExchangeType.html
          required: false
          schema:
            type: string
          example: uniswap_v2

      tags:
        - Trading pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipairXYLiquidity'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/tokens':
    x-pyramid-route-name: web_tokens
    get:
      operationId: web_tokens
      summary: Information about supported tokens.
      tags:
        - Token
      parameters:
        - name: chain_slug
          in: query
          description: Blockchain slug.
          required: false
          schema:
            type: string
          example: "ethereum"
        - name: exchange_slug
          in: query
          description: |
             Exchange slug or exchange address. Providing this parameter requires
             providing `chain_slug` as well.

             Currently only Uniswap-like exchanges are supported.
          required: false
          schema:
            type: string
          examples:
            "exchange slug":
              value: "sushiswap"
            "exchange address":
              value: "0xBF85FDCE9E4FA7D5A0177559150B15BF7F1BFD93"
        - name: token_symbol
          in: query
          description: |
            Token symbol. Can be the either token in a trading pair, i.e. a base token
            or a quote token symbol.
          required: false
          schema:
            type: string
          example: "WETH"
        - name: token_name
          in: query
          description: |
            Full name of the token
          required: false
          schema:
            type: string
          example: "Basic Attention Token"
        - name: page
          in: query
          description: Page number, zero-indexed
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: page_size
          in: query
          description: Limit the number of tokens returned in each page.
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: |

            Which token property should be used to sort the search results.

            The default sorting by `token_id` only makes sense for machine-to-machine
            actions. The recommended sort method is to sort by descending volume (i.e.
            most interesting tokens first).

            > **NOTE:** If sort property is specified, tokens that have that property
            > set to NULL are excluded from the results.

          required: false
          schema:
            type: string
            enum: [
              token_id, volume_24h, liquidity_latest, liquidity_change_7d,
              liquidity_change_30d, liquidity_change_360d, liquidity_all_time_high,
              liquidity_all_time_low
            ]
            default: token_id
        - name: direction
          in: query
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z.
             * `desc` - Descending, from Z to A.
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: List of token summmaries.
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedTokenOnChainInfo'
        '404':
          description: No tokens found.
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/token/details':
    x-pyramid-route-name: web_token_details
    get:
      operationId: web_token_details
      summary: |
        Information about a token living on a blockchain.
      parameters:
        - name: chain_slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string
          example: ethereum
        - name: address
          in: query
          description: |
             The address location of the actual token contract that manages the logic
             for the tokens.
          required: true
          schema:
            type: string
          example: "0x0123456789aBcDe0123456789AbCdE0123456789"

      tags:
        - Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenOnChainInfo'
        '404':
          description: Token not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/lending-reserves':
    x-pyramid-route-name: web_lending_reserves
    get:
      operationId: web_lending_reserves
      summary:
          Get a list of reserves for a particular lending protocol.
      description: |
        A decentralized lending protocol such as AAVE v3 consists of multiple
        reserves, one for each asset type that is being lent / borrowed. A reserve
        is a "pile" of a particular asset, which provides liquidity for the lending /
        borrowing activities.
      tags:
        - Lending protocol
      parameters:
        - name: protocol_slug
          in: query
          description: The slug of the lending protocol.
          required: false
          schema:
            type: string
          example: "aave_v3"
        - name: chain_slug
          in: query
          description: >
            The slug of the chain to additionally filter the reserves by.
          required: false
          schema:
            type: string
          example: "polygon"
        - name: page
          in: query
          description: Page number, zero-indexed
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: page_size
          in: query
          description: Limit the number of reserves returned in each result page.
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: |

            What kind of sort options is available for the output.

            The default `reserve_slug` sorts the reserves by their slug in ascending order.

          required: false
          schema:
            type: string
            default: reserve_slug
            enum: [
              asset_name, asset_symbol, chain_name, protocol_name, reserve_slug,
              stable_borrow_apr_latest, supply_apr_latest, variable_borrow_apr_latest
            ]
        - name: direction
          in: query
          description: |
            Sort order:
             * `asc` - Ascending, from lowest to highest
             * `desc` - Descending, from highest to lowest
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReserveInfo'
        "422":
          description: Unexpected error - usually bad query input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/lending-reserve/details':
    x-pyramid-route-name: web_lending_reserve_details
    get:
      operationId: web_lending_reserve_details
      summary: |
        Information about a particular reserve in a lending protocol.
      parameters:
        - name: protocol_slug
          in: query
          description: The slug of the lending protocol.
          required: true
          schema:
            type: string
          example: "aave_v3"
        - name: reserve_slug
          in: query
          description: >
            The slug of the asset held by the reserve.
          required: true
          schema:
            type: string
          example: "wmatic"
        - name: chain_slug
          in: query
          description: >
            URL slug of the blockchain on which the lending protocol runs.
          required: true
          schema:
            type: string
          example: "polygon"
      tags:
        - Lending protocol
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveInfo'
        '404':
          description: Reserve not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/lending-reserve/candles':
    x-pyramid-route-name: web_lending_reserve_candles
    get:
      operationId: web_lending_reserve_candles
      summary: |
        Candle data for a particular reserve in a lending protocol.
      description: |
        The candles are sorted by their timestamps, oldest first.

        The maximum number of candles of a particular type returned in the response is
        limited to 10,000, and if necessary the most recent candles are omitted from the
        result.

        Mind that the data is sparse. If there was no data to generate a candle from,
        the corrseponding candle for that timestamp will not exist in the response.
        Or in other words, no forward-filling or other gap fill mechanism is performed by
        the backend.
      parameters:
        - name: protocol_slug
          in: query
          description: The slug of the lending protocol.
          required: true
          schema:
            type: string
          example: "aave_v3"
        - name: reserve_slug
          in: query
          description: >
            The slug of the asset held by the reserve.
          required: true
          schema:
            type: string
          example: "wmatic"
        - name: chain_slug
          in: query
          description: >
            URL slug of the blockchain on which the lending protocol runs.
          required: true
          schema:
            type: string
          example: "polygon"
        - name: time_bucket
          in: query
          description: >
              What time bucket to use for the candle size.

              Note that candle data might not exist for all buckets, especially the
              shorter ones, in wich case 404 Not Found will be returned.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h
        - name: candle_types
          in: query
          description: |
            The type(s) of candles to retrieve. At least one candle type must be
            specified.
            A special type "all" can be specified as a shorthand to retrieve all
            supported candle types.
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [stable_borrow_apr, variable_borrow_apr, supply_apr, all]
            minItems: 1
            uniqueItems: true
        - name: start
          in: query
          description: |
              When the candle fetch period starts.

              Use UNIX UTC timestamp as an ISO 8601 formatted string.

              This range parameter is inclusive. If not specified, it defaults to `end`
              minus 100 * `time_bucket`.
          required: false
          schema:
            type: string
            format: iso8601
          example: "2022-02-13T10:15:49"
        - name: end
          in: query
          description: |
              When the candle fetch period ends.

              Use UNIX UTC timestamp as an ISO 8601 formatted string.

              This range parameter is inclusive. If not specified, it defaults to `now()`.
          required: false
          schema:
            type: string
            format: iso8601
          example: "2023-04-13"
      tags:
        - Lending protocol
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimalCandleList'
        '404':
          description: |
            Reserve not found or no candle data for the selected period and time bucket.
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/top':
    x-pyramid-route-name: web_top
    get:
      operationId: web_top
      summary: Top pairs by a chosen criteria in chosen time frame.
      description: |

        This endpoint is designed to scan new trading pairs to be included in a trading universe.
        It ranks and filters the daily/weekly/etc. interesting trading pairs by a criteria.
                
        The result data is asynchronously filled, and may not return the most fresh situation,
        due to data processing delays. So when you call this method `24:00` it does not have 
        pairs for yesterday ready yet. The results may vary, but should reflect the look back of last 24h. 
                
        Various heuristics is applied to the result filtering, like excluding stable pairs,
        derivative tokens, choosing the trading pair with the best fee, etc.
        
        When you store the result, you need to use tuple `(chain id, pool address)` as the persistent key.
        Any integer primary keys may change over long term. 
        
        For the result format documentation, see `tradingstrategy.top` Python module.

        **This API is still under heavy development**.

      parameters:
        - name: method
          in: query
          description: | 
          
            What kind of criteria we will use to choose the pairs.
            
            The default is `sorted-by-liquidity-with-filtering`
            
            - `sorted-by-liquidity-with-filtering`: Get all volatile trading pairs. Exclude stablecoins.
              Exclude derivative tokens (stETH vs. ETH). Exclude duplicates and pick one with the best trading
              fee excluding 1 BPS tier.

          required: false
          schema:
            type: string
            enum: [sorted-by-liquidity-with-filtering]
            default: sorted-by-liquidity-with-filtering

        - name: time_bucket
          in: query
          description: |

            What time bucket to use for the candle time frame.
            
            Currently only supports daily.

          required: true
          schema:
            type: string
            enum: [1d]
            default: 1d
          example: 1d

        - name: limit
          in: query
          description: |

              How many pairs to return from the top.
            
              We may return a different amount of pairs, give or add some, 
              as the filtering queries cannot know the number of tokens returned 
              until the reply is complete.

          required: true
          schema:
            type: integer
            default: 100
          example: 100

        - name: exchange_slugs
          in: query
          description: Slugs for DEXes to look up
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - uniswap-v2,uniswap-v3
        - name: chain_slugs
          in: query
          description: Slugs for blockchain to look up
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - ethereum

      tags:
        - Trading signal
      responses:
        "200":
          description: OK
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/token-metadata-jsonl':
    x-pyramid-route-name: web_token_metadata_jsonl
    get:
      operationId: web_token_metadata_jsonl
      summary: Token metadata
      description: |

        Get token metadata
        
        - Name and symbol
        
        - Trading pairs
        
        - TokenSniffer metadata
        
        - Coingecko metadata
        
        The response is streamed in JSONL format.
        
        For the result format documentation, see `tradingstrategy.client.Client` Python API.

        **This API is still under heavy development**.

      parameters:

        - name: chain_slug
          in: query
          description: Slugs for blockchain to look up
          required: false
          style: form
          explode: false
          schema:
            type: string
          example:
            - ethereum

        - name: addresses
          in: query
          description: Token ERC-20 addresses
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9
      tags:
        - Trading signal
      responses:
        "200":
          description: OK
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/top-momentum':
    x-pyramid-route-name: web_top_momentum
    get:
      operationId: web_top_momentum
      summary: Get pairs with fastest moving price
      description: |

        Return top up and down 100 price changes for 24h.

        The results are split for all trading pairs and trading pairs with $1M min liquidity.

      parameters:
        - name: summary
          in: query
          description: | 
          
            If set, return only the top 5 entries to reduce the download size.

          required: false
          schema:
            type: boolean
            default: false

      tags:
        - Trading signal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopMomentum'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/impressive-numbers':
    x-pyramid-route-name: web_impressive_numbers
    get:
      operationId: web_impressive_numbers
      summary: |

        An API endpoint that spits out impressive numbers.

      tags:
        - Data collection
      responses:
        "200":
          description: JSON dict of impressive numbers

  # We do not want this endpoint to be publicly advertised in the API docs,
  # but we keep it commented-out in this file for internal reference.
  # The endpoint itself is manually configured in the Pyrmaid app.
  #
  # https://github.com/tradingstrategy-ai/backend/issues/112
  #
  # '/activity':
  #   x-pyramid-route-name: activity
  #   post:
  #     operationId: activity
  #     summary: Record new user activity or interction with the system.
  #     tags:
  #       - Telemetry
  #     parameters:
  #       - name: user_id
  #         in: query
  #         description: |
  #           A unique user identifier for distinguishing individual interaction occurences.
  #         required: true
  #         schema:
  #           type: string
  #         example: "Zm9vIGJhcg=="

  #       - name: type
  #         in: query
  #         description: |
  #           The type of the user activity such as "chart".
  #         required: true
  #         schema:
  #           type: string
  #         example: "chart"

  #       - name: CF-Connecting-IP
  #         in: header
  #         description: |
  #           IP address of the user who interacted with a chart.
  #         required: false
  #         schema:
  #           type: string
  #         example: "123.45.67.89"

  #       - name: CF-IPCountry
  #         in: header
  #         description: |
  #           A two-character ISO country code of the user's country.
  #         required: false
  #         schema:
  #           type: string
  #           minLength: 2
  #           maxLength: 2
  #         example: "UK"

  #     responses: # list of responses
  #       "200":
  #         description: 'A static "success" JSON object: {"status": "OK"}'
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #       "422":
  #         description: Unexpected error - usually bad query input
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/GenericErrorModel"


# An object to hold reusable parts that can be used across the definition
components:
  schemas:
    ExchangeSummaryListing:
      type: object
      properties:
        exchanges:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeSummary"
    ExchangeSummary:
      type: object
      properties:
        notable:
          description: Should be shown by default
          type: boolean
          example: true
        exchange_id:
          description: Primary key for exchange
          type: integer
          example: 1
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        exchange_type:
          description: |
            Type of the exchange, one of Exchange type enum values.
            See: https://tradingstrategy.ai/docs/programming/api/client/help/tradingstrategy.exchange.ExchangeType.html
          type: string
          example: "uniswap_v2"
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        chain_name:
          description: Human readable name for the blockchain where the exchange is running
          type: string
          example: Ethereum
        human_readable_name:
          description: Human readable name for this exchange. If there is no known name, then it is generated based on the address.
          type: string
          minLength: 4
          example: Uniswap (v2)
        address:
          description: Ethereum address, non-checksummed, for the exchange factory
          type: string
          minLength: 4
          example: "0x0"
        usd_volume_30d:
          description: USD volume for the last 30 days
          type: number
          example: 100000.00
        pair_count:
          description: |
            How many trading pairs this exchange has
          type: integer
          example: 555
    ExchangeDetails:
      type: object
      properties:
        exchange_id:
          description: Machine readable string id for this exchange.
          type: string
          minLength: 4
          example: uniswap_v2
        chain_name:
          description: |
            Human-readable name of the blockchain
          type: string
          example: "Ethereum"
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: "ethereum"
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: "uniswap_v2"
        exchange_type:
          description: |
            Type of the exchange, one of Exchange type enum values.
            See: https://tradingstrategy.ai/docs/programming/api/client/help/tradingstrategy.exchange.ExchangeType.html
          type: string
          example: "uniswap_v2"
        liquidity_type:
          description: What kind of liquidity measurement is used
          type: string
          example: xyliquidity
          enum: [xyliquidity, uniswap-v3-style-concentrated-liquidity]
        human_readable_name:
          description: Human readable name for this exchange
          type: string
          minLength: 4
          example: Uniswap
        homepage:
          description: Link to the exchange trade page
          type: string
          format: uri
          example: https://uniswap.org
        twitter:
          description: Link to the exchange Twitter
          type: string
          format: uri
          example: https://twitter.com/uniswap
        blockchain_explorer_link:
          description: Link to a smart contract explorer showing the factory contract
          type: string
          format: uri
          example: https://etherscan.io/address/0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        address:
          description: The factory address for Uniswap AMM like setups
          example: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
        buy_volume_30d:
          description: Buy USD volume for the last 30 days
          type: number
          example: 100000.00
        sell_volume_30d:
          description: Sell USD volume for the last 30 days
          type: number
          example: 100000.00
        buy_volume_all_time:
          description: Buy USD volume for all time
          type: number
          example: 100000.00
        sell_volume_all_time:
          description: Sell USD volume for all time
          type: number
          example: 100000.00
        buy_count_all_time:
          description: Number of individual buy transactions
          type: integer
          example: 1
        sell_count_all_time:
          description: Number of individual sell transactions
          type: integer
          example: 1
        pair_count:
          description: Trading pair count (optional)
          type: integer
          example: 500
        active_pair_count:
          description: |

              Active trading pair count (optional)

              [See trading pair inclusion criteria](https://tradingstrategy.ai/docs/programming/tracking.html).
          type: integer
          example: 1
        first_trade_at:
          description: |
            When the first trade was made on this exchange (optional)
          type: string
          format: iso8601

    PairSummary:
      description: |
          Summary of the trading pair.

          Used to return pair data in listings.

      properties:
        pair_id:
          description: Primary key for the traidng pair
          type: integer
          example: 1
        pair_name:
          description: |

            Human-readable name for this trading pair.

          type: string
          example: Ether-US Dollar Coin
        pair_symbol:
          description: |

            Human-readable name for this trading pair.

            Usually base token - quote token, uppercase.

            WETH is displayed as ETH.

          type: string
          example: ETH-USDC
        pair_slug:
          description: |

            URL slug for this trading pair.

            Usually base token - quote token, lower case.

            WETH is displayed as ETH.

          type: string
          example: eth-usdc
        exchange_id:
          description: Exchange primary key where this token trades
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        exchange_name:
          description: |
            Human readable name of the exchange
          type: string
          example: Uniswap v2
        exchange_type:
          description: |
            Type of the exchange, one of Exchange type enum values.
            See: https://tradingstrategy.ai/docs/programming/api/client/help/tradingstrategy.exchange.ExchangeType.html
          type: string
          example: "uniswap_v2"
        chain_name:
          description: |
            Human-readable name of the blockchain
          type: string
          example: Ethereum
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        base_token_symbol:
          description: Token that is being bought
          type: string
          example: WETH
        quote_token_symbol:
          description: Token that is used as a currency
          type: string
          example: USDC
        base_token_symbol_friendly:
          description: |
            Token that is being bought.

            Human friendly symbol. E.g. WETH->ETH.

          type: string
          example: ETH
        quote_token_symbol_friendly:
          description: |
            Token that is used as a currency

            Human friendly symbol. E.g. WETH->ETH.
          type: string
          example: USDC
        base_token_address:
          description: Smart contract address of the base token
          type: string
          format: Ethereum address
          example: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
        quote_token_address:
          description: Smart contract address of the quote token
          type: string
          format: Ethereum address
          example: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
        base_token_slug:
          type: string
          description: >
            URL slug for the base token in the pair.
          example: ETH
        quote_token_slug:
          type: string
          description: >
            URL slug for the quote token in the pair.
          example: USDC
        pool_address:
          description: Pool contract address
          type: string
          minLength: 4
          example: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
          format: Ethereum address
        exchange_rate:
          description: |
              US dollar / quote token exchange rate used to calculate the latest price.

              If the pair is quoted in a US dollar stablecoin this number is 1.0.

              If the pair is quoted in ETH then this is the current ETH price.

              In some situations, the exchange rate might be missing, in which case this is `null`.
              (TODO: In the future the exchange rate will be always present.)

          type: number
          example: 1.000

        usd_price_latest:
          description: |
              Base token/quote token converted to USD through direct quote token/USD exchange rate.

              The close of the 15 minute candle.
          type: number
          example: 250.12
        price_change_24h:
          description: |
              The % how much price has changed for the last 24h.

          type: number
          example: 0.05
        usd_volume_24h:
          description: USD trading volume for the last day
          type: number
          example: 100000.00
        usd_liquidity_latest:
          description: The current available XY liquidity
          type: number
          example: 100000.00
        liquidity_change_24h:
          description: |
              The % how much liquidity has changed for the last 24h.

          type: number
          example: 0.05
        usd_liquidity_change_24h:
          description: |
              The US dollar value how much liquidity has changed for the last 24h.

          type: number
          example: 120000
        liquidity_type:
          description: What kind of liquidity measurement is used
          type: string
          example: xyliquidity
          enum: [xyliquidity]
        pair_swap_fee:
          description: |
            The estimated fee when trading the pair on the exchange it is listed on.
            The fee is expressed as a floating point number. To obtain the fee expressed
            as a percentage, multiply this value by 100.
          type: number
          example: 0.0025
        pool_swap_fee:
          description: |
            An alias for `pair_swap_fee` for backward compatibility.
          type: number
          example: 0.0025

        pair_tvl:
          description: |
            The total value locked number for the pair in USD.
          type: number
          example: 250511.6241

        pair_tvl_last_updated:
          description: |
            The timestamp of the block at which the `pair_tvl` value, if available, was
            last updated.

            It is a UNIX UTC timestamp returned as an ISO 8601 formatted string.

          type: string
          format: timestamp
          example: "2023-06-12T11:59:43.182594"

        pair_tvl_last_block:
            description: |
              The block number at which the`pair_tvl` value was last updated.
            type: integer
            example: 17460244

    PaginatedPairSummary:
      description: >
          Iterate through a list of PairSummary responses

      properties:
        total:
          description: Total results entries
          type: integer
          example: 100
        pages:
          description: Total result pages
          type: integer
          example: 10
        results:
          description: One page of pair summaries
          type: array
          items:
            $ref: '#/components/schemas/PairSummary'

    GenericErrorModel:
      description: |
          Returned in 422 Unprocessable Entity errors.

          Usually means some of the query input parameters are invalid.

      properties:
        error_id:
          description: Machine readable identifier for the error
          type: string
          example: LookupInputException
        message:
          description: Human readable message for the errir
          type: string

    Candle:
      description: |

        One OHLCV candle for the candle charts

        [Read more about what trading candles are](https://tradingstrategy.ai/docs/glossary.html#term-Candle).

      type: object
      properties:
        ts:
          description: >

            UNIX UTC timestamp as ISO 8601 formatted string.

          type: number
          format: timestamp
        o:
          description: >
            Open value of the candle
          type: number
          format: us_dollar
        h:
          description: >
            High value of the candle
          type: number
          format: us_dollar
        l:
          description: >
            Low value of the candle
          type: number
          format: us_dollar
        c:
          description: >
            Close value of the candle
          type: number
          format: us_dollar
        v:
          description: >
            Trade volume in US dollar
          type: number
          format: us_dollar
        b:
          description: |
            Number of buy transactions
          type: integer
        s:
          description: |
            Number of sell transactions
          type: integer
        bv:
          description: |
            Volume of buy transactions
          type: number
          format: us_dollar
        sv:
          description: |
            Volume of sell transactions
          type: number
          format: us_dollar
        xr:
          description: |

            `xr` stands for the exchange rate.

            Appromaxime exchange rate between US dollar and quote token for this candle.

            The actual exchange rate may be true only for 1 minute candles.
            The 1 minute candles use reference price oracle for quote token/USD.
            Other candle data is upsampled from the 1 minute candles and do not internally use any exchange rate.

            Any USD stablecoin is assumed to be 1:1 to actual USD.

          type: number
        tc:
          description: |

            `tc` stands for the trade count.

            Number of individual trades executed during the candle time period.

          type: number

    MinimalCandle:
      description: |
        One OHLC candle for the candle charts

        [Read more about what trading candles are](https://tradingstrategy.ai/docs/glossary.html#term-Candle).
      type: object
      properties:
        ts:
          description: >
            UNIX UTC timestamp as an ISO 8601 formatted string.
          type: string
          format: iso8601
        o:
          description: >
            Open value of the candle
          type: number
          format: float
        h:
          description: >
            High value of the candle
          type: number
          format: float
        l:
          description: >
            Low value of the candle
          type: number
          format: float
        c:
          description: >
            Close value of the candle
          type: number
          format: float
      example:
          {
            "ts": "2023-03-21T16:00:00", "o": 100.86, "h": 101.02, "l": 99.89, "c": 100.12
          }

    MultipairCandleList:
      description: |
        Candles for multiple pairs bundled in the same object.
        Candles for a particular pair can be accessed by a
        stringified pair ID.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CandleList'

    CandleList:
      description: |

        Multiple candles to render.

        Note that this data is sparse. If there were no trades, the timestamp for the candle time bucket
        period does not exist in the array.

        Candles will be sorted from the first to the last.

      type: array
      items:
        $ref: '#/components/schemas/Candle'

    MultipairMinimalCandleList:
      description: |
        Minimal candles for multiple pairs bundled in the same object.
        Minimal Candles for a particular pair can be accessed by a
        stringified pair ID.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MinimalCandleList'

    MinimalCandleList:
      description: |
        A list of candles with minimal data ordered from the oldest to the most recent.
      type: array
      items:
        $ref: '#/components/schemas/MinimalCandle'

    TimeSpanTradeData:
      description: |

        Trade data for a selected timespan. Usually this is the summary data of the latest daily, hourly or weekly data.

        For the pairs that do not have active trading, the data is based on the time of the last trade.
        (This behavior is to be changed in the future.)

      type: object
      properties:
        price_open:
          description: >
            Open value of the candle
          type: number
          format: us_dollar
        price_high:
          description: >
            High value of the candle
          type: number
          format: us_dollar
        price_low:
          description: >
            Low value of the candle
          type: number
          format: us_dollar
        price_close:
          description: >
            Close value of the candle
          type: number
          format: us_dollar
        volume:
          description: >
            Trade volume in US dollar
          type: number
          format: us_dollar
        liquidity_high:
          description: >
            Max liquidity during the period
          type: number
          format: us_dollar
        liquidity_low:
          description: >
            Min liquidity during the period
          type: number
          format: us_dollar
        buys:
          description: >
            Number of individual buys
          type: integer
        sells:
          description: >
            Number of individual sells
          type: integer
        liquidity_events:
          description: >
            Number of individual liquidity events - how many times liquidity was added or removed from the pool
          type: integer


    XYLiquiditySample:
      description: |

        One XY liquidity candle for the liquidity charts. It represents a liquidity bar during the sample period:
        how much liquidity there was at the opening of the period, highest liquidity seen and how much liquidity
        there was at the closing period.

        This data can be used to calculate the price impact and gauge the popularity of a trading pair.

        Any dollar amount presents one side of the liquidty. For example adding 100 BNB + 5000 USD to the liquidity
        is presented as 5000 USD.

        [Read more about XYLiquidity here](https://tradingstrategy.ai/docs/programming/api/liquidity.html).

      type: object
      properties:
        ts:
          description: |

            UNIX UTC timestamp as ISO 8601 formatted string.

          type: number
          format: timestamp
        o:
          description: |
            Open value of the candle
          type: number
          format: us_dollar
        h:
          description: |
            High value of the candle
          type: number
          format: us_dollar
        l:
          description: |
            Low value of the candle
          type: number
          format: us_dollar
        c:
          description: |
            Close value of the candle
          type: number
          format: us_dollar
        a:
          description: |
            Number of liquidity add events in this period.

            Maybe zero if no data available.
          type: integer
        r:
          description: |
            Number of liquidity remove events in this period.

            Maybe zero if no data available.

          type: integer
        av:
          description: |
            Amount of liquidity added during this period

            Maybe zero if no data available.
          type: number
          format: us_dollar
        rv:
          description: |
            Amount of liquidity removed during this period

            Maybe zero if no data available.
          type: number
          format: us_dollar
        xr:
          description: |

            `xr` stands for the exchange rate.

            Appromaxime exchange rate between US dollar and quote token for this candle.

            The actual exchange rate may be true only for 1 minute candles.
            The 1 minute candles use reference price oracle for quote token/USD.
            Other candle data is upsampled from the 1 minute candles and do not internally use any exchange rate.

            Any USD stablecoin is assumed to be 1:1 to actual USD.

          type: number
        tc:
          description: |

            `ct` stands for the trade count.

            Number of individual trades executed during the candle time period.

          type: number

    XYLiquiditySampleList:
      description: |

        Multiple liquidity samples to render.

        Note that this data is sparse. If there were no trading events, there is no sample
        for the time period in the array.

        Samples are sorted from the first to the last.

      type: array
      items:
        $ref: '#/components/schemas/XYLiquiditySample'

    MultipairXYLiquidity:
      description: |

        Liquidity samples for multiple pairs bundled in the same object.

        Liquidity samples series for a particular pair can be accessed by a
        stringified pair ID.

      type: object
      additionalProperties:
        $ref: '#/components/schemas/XYLiquiditySampleList'

    PairAdditionalDetails:
      description: >

        Additional details on a trading pair.

      type: object
      properties:
        chain_name:
          description: |
            Human readable name for the blockchain
          type: string
          example: Ethereum
        chain_logo:
          description: |
            Direct link to the logo of the exchange.

            Either SVG or high resh PNG.

            Should be transparent.

            Assuming white/light background version.

          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/0/05/Ethereum_logo_2014.svg
        exchange_name:
          description: |
            Human readable name for the exchange
          type: string
          example: Uniswap (v2)
        exchange_link:
          description: |
            Direct link ot the exchange where this pair is
          type: string
          example: https://uniswap.org
        exchange_logo:
          description: |
            Direct link to the logo of the exchange.

            Either SVG or high resh PNG.

            Should be transparent.

            Assuming white/light background version.

          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/5/5a/Uniswap_Logo_and_Wordmark.svg
        first_trade_at:
          description: |
            When the first trade was made
          type: string
          format: iso8601
        last_trade_at:
          description: |
            When the last seen trade was made
          type: string
          format: iso8601
        base_token_homepage:
          description: |
            Homepage of the base token
          type: string
          format: url
        quote_token_homepage:
          description: >
            Homepage of the quote token
          type: string
          format: url
        pair_contract_address:
          description: |
            The smart contract address of this trading pair.
          type: string
          format: blockchain_address
        trade_link:
          description: |
            Direct link to a page where this pair can be traded.

            (optional)
          type: string
          format: url
        buy_link:
          description: |
            Direct link to a page where you scan swap quote token -> base token

            (optional)
          type: string
          format: url
        sell_link:
          description: |
            Direct link to a page where you scan swap base token -> quote token

            (optional)
          type: string
          format: url
        pair_explorer_link:
          description: |
            Direct link to EIP-3091 compatible block explorer where you can view the smart contract
            of this trading pair.

            https://eips.ethereum.org/EIPS/eip-3091

            (optional)
          type: string
          format: url
        base_token_explorer_link:
          description: |
            Direct link to EIP-3091 compatible block explorer where you can view the smart contract
            of the base token.

            https://eips.ethereum.org/EIPS/eip-3091

            (optional)
          type: string
          format: url
        quote_token_explorer_link:
          description: |
            Direct link to EIP-3091 compatible block explorer where you can view the smart contract
            of the base token.

            https://eips.ethereum.org/EIPS/eip-3091

            (optional)
          type: string
          format: url
        buy_tax:
          description: |
            Measured buy tax for this token.
            
            The tax percent as 0...1 (100%) floating point.

            Values > 1 are error codes meaning the token tax measurement has failed
            and token is most likely out of liquidity, broken or a honeypot.
            
            Missing data or null values indicate the has not been measured yet.

          type: number
          format: float
        transfer_tax:
          description: |
            Measured transfer tax for this token.
            
            The tax percent as 0...1 (100%) floating point.

            Values > 1 are error codes meaning the token tax measurement has failed
            and token is most likely out of liquidity, broken or a honeypot.
            
            Missing data or null values indicate the has not been measured yet.

          type: number
          format: float
        sell_tax:
          description: |
            Measured selll tax for this token.
            
            The tax percent as 0...1 (100%) floating point.

            Values > 1 are error codes meaning the token tax measurement has failed
            and token is most likely out of liquidity, broken or a honeypot.
            
            Missing data or null values indicate the has not been measured yet.

          type: number
          format: float

    PairFullInfo:
      description: |

        All information on the trading pair to render a full page on it.

      type: object
      properties:
        summary:
          type: object
          $ref: '#/components/schemas/PairSummary'
        additional_details:
          type: object
          $ref: '#/components/schemas/PairAdditionalDetails'
        daily:
          type: object
          $ref: '#/components/schemas/TimeSpanTradeData'

    ReserveAdditionalDetails:
      description: >
        Additional details on a reserve.
      type: object
      properties:
        supply_apr_latest:
          description: |
            The latest known supply APR value for the reserve.
          type: number
          format: float
          nullable: true
          example: 2.2631292441881867
        stable_borrow_apr_latest:
          description: |
            The latest known stable borrow APR value for the reserve.
          type: number
          format: float
          nullable: true
          example: 5.434795079925008
        variable_borrow_apr_latest:
          description: |
            The latest known variable borrow APR value for the reserve.
          type: number
          format: float
          nullable: true
          example: 3.478360639400065
        aggregated_reserve_data:
          description: |
            A JSON snapshot of the lending reserves from the chain.
            Returned in  its raw form, i.e. as returned from querying the chain node.

            Can be empty if the snapshot is not available for any reason.
          type: object
          additionalProperties: true
        base_currency_info:
          description: |
            The info on the base currency extracted from the lending reserve snapshot.
          type: object
          additionalProperties: true
        block_number:
          description: |
            The block number at which the snapshot was taken.
          type: integer
          example: 1780220

    TokenOnChainInfo:
      description: >
        Basic info about a token from on-chain data.
      type: object
      properties:
        name:
          type: string
          example: "PancakeSwap Token"
        symbol:
          type: string
          example: "CAKE"
        token_id:
          description: The token's primary key.
          type: integer
          example: 715
        chain_name:
          description: |
            Human-readable name of the blockchain the token lives on.
          type: string
          example: Binance
        chain_slug:
          description: URL slug of the blockchain on which the token lives.
          type: string
          example: bsc
        address:
          type: string
          format: blockchain_address
          description: >
            The address of the smart contract that governs the token.
          example: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"
        total_supply:
          type: string
          format: decimal
          minimum: 0
          example: "123000.456"
        decimals:
          type: integer
          minimum: 0
          nullable: true
          description: >
             The number of decimals the token uses - e.g. 8 means to divide the token
             amount by 100_000_000 to get its user representation.
          example: 18
        chainscan_metadata:
            type: object
            nullable: false
            description: >
                Raw token metadata as fetched from external chainscan API.
                Can be an empty JSON object if no metadata has been imported yet.
            example:
                {
                  "contractAddress": "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
                  "tokenName": "PancakeSwap Token",
                  "symbol": "Cake",
                  "divisor": "18",
                  "website": "https://pancakeswap.finance/",
                  "email": "PancakeSwap@gmail.com",
                  "facebook": "",
                  "twitter": "https://twitter.com/pancakeswap"
                }
        chainscan_metadata_last_updated:
            type: string
            format: date-time
            nullable: true
            description: >
              The UTC time the token metadata was last updated from a chainscan API.
              Formatted as ISO 8601 string.
            example:
                "2022-07-25T10:03:12.605978"
        liquidity_latest:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The latest available token suply in USD.
        liquidity_change_7d:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The relative liquidity change (%) in the last seven days.
             If historical data does not span back long enough to compute it,
             no value is returned.
        liquidity_change_30d:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The relative liquidity change (%) in the last thirty days.
             If historical data does not span back long enough to compute it,
             no value is returned.
        liquidity_change_360d:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The relative liquidity change (%) in the last 360 days.
             If historical data does not span back long enough to compute it,
             no value is returned.
        liquidity_all_time_high:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The highest 15-minute liquidity in USD of all times.
        liquidity_all_time_low:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The lowest 15-minute liquidity in USD of all times.
        volume_24h:
          type: number
          format: float
          minimum: 0.0
          nullable: true
          description: >
             The total token trade volume in USD in the last 24 hours.

    PaginatedTokenOnChainInfo:
      description: >
          Iterate through a list of TokenOnChainInfo responses.

      properties:
        total:
          description: Total results entries
          type: integer
          example: 100
        pages:
          description: Total result pages
          type: integer
          example: 10
        results:
          description: One page of tokens info
          type: array
          items:
            $ref: '#/components/schemas/TokenOnChainInfo'

    PaginatedReserveInfo:
      description: >
          Iterate through a list of ReserveInfo responses.

      properties:
        total:
          description: Total results entries
          type: integer
          example: 100
        pages:
          description: Total result pages
          type: integer
          example: 10
        results:
          description: One page of reserves info
          type: array
          items:
            $ref: '#/components/schemas/ReserveInfo'

    ReserveInfo:
      description: >
        Information about a reserve in a lending protocol.

      properties:
        reserve_id:
          description: >
            The internal ID of reserve.
          type: integer
          example: 1
        reserve_slug:
          description: >
            The slug of the asset held by the reserve.
          type: string
          example: "wmatic"
        protocol_slug:
          description: >
            The slug of the lending protocol the reserve is a part of.
          type: string
          example: "aave_v3"
        chain_id:
          description: >
            The ID of the chain.
          type: integer
          example: 137
        chain_slug:
          description: >
            The slug of the chain hosting the reserve.
          type: string
          example: "polygon"
        asset_id:
          description: >
            The internal ID of the asset held by the reserve.
          type: integer
          example: 1234
        asset_name:
          description: >
            The name of the asset held by the reserve.
          type: string
          example: "Wrapped Matic"
        asset_symbol:
          description: >
            The trading symbol of the asset held by the reserve.
          type: string
          example: "WMATIC"
        atoken_id:
          description: >
            The internal ID of the aToken representing a stake in the reserve.
          type: integer
          example: 851
        atoken_address:
          description: >
            The contract address of the aToken.
          type: string
          format: address
          example: "0x6d80113e533a2c0fe82eabd35f1875dcea89ea97"
        stable_debt_token_id:
          description: >
            The internal ID of the token representing a debt to the protocol
            with a stable interest rate.
          type: integer
          example: 860
        stable_debt_token_address:
          description: >
            The contract address of the stable debt interest token.
          type: string
          format: address
          example: "0xf15f26710c827dde8acba678682f3ce24f2fb56e"
        variable_debt_token_id:
          description: >
            The internal ID of the token representing a debt to the protocol
            with a variable interest rate.
          type: integer
          example: 863
        variable_debt_token_address:
          description: >
            The contract address of the variable debt interest token.
          type: string
          format: address
          example: "0x4a1c3ad6ed28a636ee1751c69071f6be75deb8b8"
        interest_rate_strategy_address:
          description: >
            An address of the smart contract governing  interest rate strategy.
          type: string
          format: address
          example: "0x03733F4E008D36F2E37F0080FF1C8DF756622E6F"
        additional_details:
          type: object
          $ref: '#/components/schemas/ReserveAdditionalDetails'

    TopMomentum:
      description: >

        Return different categories of pairs exhibiting top price momentum action.

      type: object
      properties:
        top_up_24h:
          type: array
          items:
            $ref: "#/components/schemas/PairSummary"
          uniqueItems: true
        top_down_24h:
          type: array
          items:
            $ref: "#/components/schemas/PairSummary"
          uniqueItems: true
        top_up_24h_min_1m_liq:
          type: array
          items:
            $ref: "#/components/schemas/PairSummary"
          uniqueItems: true
        top_down_24h_min_1m_liq:
          type: array
          items:
            $ref: "#/components/schemas/PairSummary"
          uniqueItems: true
        top_liquidity_added_24h_min_liq_1m:
          type: array
          items:
            $ref: "#/components/schemas/PairSummary"
          uniqueItems: true

    ChainDetails:
      description: |

        Details and indexing status of a blockchain.

      type: object
      properties:
        chain_id:
          description: |
            Chain id
          type: integer
          example: 1
        chain_slug:
          description: |
            URL formattable name of the chain
          type: string
          example: ethereum
        chain_name:
          description: |
            Human readable name for the blockchain
          type: string
          example: Ethereum
        homepage:
          description: |
            Link to the chain homepage
          type: string
          example: https://ethereum.org
        chain_logo:
          description: |
            Direct link to the logo of the blockchain.

            Either SVG or high resh PNG.

            Should be transparent.

            Assuming white/light background version.

          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/0/05/Ethereum_logo_2014.svg
        chain_explorer:
          description: |
            URL of the blockchain's block explorer
          type: string
          example: https://etherscan.io/
        start_block:
          description: |
            First block indexed
          type: integer
          example: 9900000
        end_block:
          description: |
            Last block indexed
          type: integer
          example: 12900000
        block_count:
          description: |
            Indexed block count.

            This should be end_block - start_block unless some blocks have been skipped for some reason.

          type: integer
          example: 1000000
        exchanges:
          description: |
            Number of indexed exchanges
          type: integer
          example: 10
        pairs:
          description: |
            Identified trading pair count across all exchanges on this blockchain
          type: integer
          example: 1000
        tracked_pairs:
          description: |

            How many trading pairs are being actively tracked.
            The pair activity exceeds the threshold to make it appear on the website
            and have OHLCV data generated for it.

            For example, trading pairs with very low swap count are not active.

          type: integer
          example: 50
        tokens:
          description: |
            Number of tokens that appear in trading pairs.

            - Tokens lacking a supported trading pair on a supported exchange are not included in this number
            - Tokens that have a trading pair but no trades or volume are still counted

          type: integer
          example: 500
        first_swap_at:
          description: |
            First observed swap timestamp
          type: string
          format: iso8601
          example: 2020-05-01T12:00
        last_swap_at:
          description: |
            Last observed swap timestamp
          type: string
          format: iso8601
          example: 2021-10-01T12:00
        minute_candles:
          description: |
            Number of 1 min candles for all trading pairs on this chain
          type: integer
          example: 1000000

    ChainSummary:
      description: |

        Blockchain summary for listing.

      type: object
      properties:
        chain_id:
          description: |
            Chain id
          type: integer
          example: 1
        chain_slug:
          description: |
            URL formattable name of the chain
          type: string
          example: ethereum
        chain_name:
          description: |
            Human readable name for the blockchain
          type: string
          example: Ethereum
        chain_logo:
          description: |
            Direct link to the logo of the exchange.

            Either SVG or high resh PNG.

            Should be transparent.

            Assuming white/light background version.

          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/0/05/Ethereum_logo_2014.svg
        exchanges:
          description: |
            Number of indexed exchanges
          type: integer
          example: 10

    TradingPairDataAvailability:
        description: |
          
          The up-to-date data status for a single trading pair.
          
          Note that due to minor chain reorganisation, the status of this 
          data may change depsite it seen final in some point.

        type: object
        properties:
          chain_id:
            description: |
              Chain id of the pair
            type: integer
          pair_address:
            description: |
              The pair smart contract address.
              
              Pair address or pool address depending on the underlying exchange.
            type: string
            minLength: 4
            example: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
            format: Ethereum address

          pair_id:
            description: |
              The internal id for the trading pair.
              
              Internal primary key id. May change over long period of time, so please use 
              (chain id, pool address) tuples for long term permanent ids.

            type: integer
            example: 1

          last_candle_at:
            description: |
  
              The timestamp of the last written candle.
              
              It is safe to read candle data older than this timestamp,
              inclusive to the timestamp.
              
              Unless there are trades happened, there won't be a new candle.

            type: string
            format: iso8601
            example: 2021-10-01T12:00

          last_trade_at:
            description: |
  
              The timestamp of the last written trade.
              
              Trades may not appear in the candles until the candle timeframe is complete.

            type: string
            format: iso8601
            example: 2021-10-01T12:00

          last_block_number:
            description: |
  
              The last read block header number of the underlying blockchain

            type: string
            format: integer
            example: 130000000

          last_block_at:
            description: |
  
              The timestamp of the last read block header number.

            type: string
            format: iso8601
            example: 2021-10-01T12:00

    TradingPairDataAvailabilityList:
      description: |

        Trading pair data availability result for multiple trading pairs.

      type: array
      items:
        $ref: '#/components/schemas/TradingPairDataAvailability'
