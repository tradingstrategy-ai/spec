openapi: 3.0.2
info:
  version: '0.1'

  title: Trade Executor API

  contact:
    email: mikko@tradingstrategy.ai
    url: 'https://tradingstrategy.ai'
  x-logo:
    url: 'https://raw.githubusercontent.com/tradingstrategy-ai/frontend/ec73a013cae04fa3f13c579dcc0dd0d80cbc49cc/src/lib/assets/logo-horizontal.svg'

  description: |

    Trade executor API allows you to read the current state of the trading strategy execution. 

    **This API is still in beta and subject to change**.

    ## Introduction

    [Trade Executor daemon](https://github.com/tradingstrategy-ai/trade-executor) offers execution for algorithmic trading strategies.
    It runs an internal webhook server allowing to query the current execution state.
    This, in turn, allows website clients to render various statistics and numbers about the live trading strategy.

    ## Execution state

    The trade execution state includes the information like
    
    * Current portfolio

    * Open and closed positions

    * Executed trades

    * Profit and loss

    * Deposit and withdraw events
    
    * Execution daemon internal metrics and diagnostics
    
    ## Logistics
    
    There are additional endpoints for
    
    * Checking the trade executor process health
    
    * Notifying about the availabiltiy of new trading data in market data feeds (i.e. a new OHLCV candle available)
    
    ## Security
    
    The API endpoints may be optionally protected with HTTP Basic Auth.

    ## Data format
    
    Currently, all the state is serialised as one JSON blob, 
    as [described here](https://github.com/tradingstrategy-ai/trade-executor/blob/master/tradeexecutor/state/state.py).

    ## About OpenAPI Specification used

    This API specification is written in [OpenAPI v3](https://swagger.io/specification/).

externalDocs:
  description: Trading Strategy documentation
  url: 'https://tradingstrategy.ai/docs/'

paths:

  '/':
    x-pyramid-route-name: home
    get:
      operationId: home
      summary: |

        Return the service name and version information as plain text.        

      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string

  '/ping':
    x-pyramid-route-name: web_ping
    get:
      operationId: web_ping
      summary: |

        An endpoint to get a JSON response to check the server is up.        

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  '/metadata':
    x-pyramid-route-name: web_metadata
    get:
      operationId: web_metadata
      summary: |

        Return the strategy and executor metadata, needed
        to render the strategy on a website.
        
        See  [Metadata class](https://tradingstrategy.ai/docs/programming/api/execution/help/tradeexecutor.state.metadata.Metadata.html)
        for the returned data.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  '/state':
    x-pyramid-route-name: web_state
    get:
      operationId: web_state
      summary: |
        
        Download the whole state of the trade executor.
        
        The state is served as a JSON blob, 
        [as described in Python source code](https://github.com/tradingstrategy-ai/trade-executor/blob/master/tradeexecutor/state/state.py).
        
        Currently one trade executor deployment can have only one state.

      responses: # list of responses
        "200":
          description: | 
            Downloading the state dump as a blob 
          
            [This returns the serialized State object](https://github.com/tradingstrategy-ai/trade-executor/blob/master/tradeexecutor/state/state.py). 

          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unexpected error - usually an internal error
          content:
            application/json:
              schema:
                type: object

  '/status':
    x-pyramid-route-name: web_status
    get:
      operationId: web_status
      summary: |
        
        Return the status of the trade execution loop: is it alive or has it crashed with an exception.
        
        See ExecutionState class for the returned data.

      responses:
        "200":
          description: | 
            Return the trade execution loop status. 
          
            This returns the serialized ExecutionState object. 

          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unexpected error - usually an internal error
          content:
            application/json:
              schema:
                type: object

  '/logs':
    x-pyramid-route-name: web_logs
    get:
      operationId: web_logs
      summary: |
        
        Return the latest logs of the trade executor.

      responses:
        "200":
          description: | 
            Return the log messages as a list of JSON objects. 
          
            See `ring_buffer_logging_handler.py` for the format. 

          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unexpected error - usually an internal error
          content:
            application/json:
              schema:
                type: object

  '/notify':
    x-pyramid-route-name: web_notify
    post:
      operationId: web_notify
      summary: |

        Notifies about the availability of new trading data on the market data feeds.        

      responses: # list of responses
        "200":
          description: OK

  '/source':
    x-pyramid-route-name: web_source
    get:
      operationId: web_source
      summary: |
        
        Get the source code of the strategy

      responses:
        "200":
          description: | 
            Return the source code of the strategy. 
          
            Returns an empty string if the source code is not public. 

          content:
            text/plain:
              schema:
                type: string

        "422":
          description: Unexpected error - usually an internal error
          content:
            application/json:
              schema:
                type: object


  '/visualisation':
    x-pyramid-route-name: web_visualisation
    get:
      operationId: web_visualisation
      summary: |
        
        Get the strategy visualisation.

      parameters:
        - name: type
          in: query
          description: |
            
            Visualisation options:
            
             * `small` - 512 x 512 PNG
            
             * `large` - 1920 x 1920 SVG

          required: false
          schema:
            type: string
            enum: [small, large]
            default: small

        - name: theme
          in: query
          description: |
            
            Color scheme options:
            
             * `light` - black on white charts
            
             * `dark` - white on black charts

          required: false
          schema:
            type: string
            enum: [light, dark]
            default: dark

      responses:
        "200":
          description: | 
            Return the source code of the strategy. 
          
            Returns an empty string if the source code is not public. 

          content:
            text/plain:
              schema:
                type: string

        "422":
          description: |
          
            Unexpected error - usually an internal error
            
            Maybe also returned when image data is not yet avaible.
            It is generated when the trade executor successfully completes
            its first strategy execution cycle.

          content:
            application/json:
              schema:
                type: object

  '/chart':
    x-pyramid-route-name: web_chart
    get:
      operationId: web_chart
      summary: |
        
        Render various charts about the trade execution output.
        
        By default, output charts as interactive Plotly.js payload.

      parameters:
        - name: chart
          in: query
          description: |
            Which time-series data we are queryinh

          required: true
          schema:
            type: string
            enum: [compounding_realised_profitability, total_equity, funding_flow]

        - name: source
          in: query
          description: |
            Are we looking for live data or backtest

          required: true
          schema:
            type: string
            enum: [live_trading, backtest]
            default: live_trading

      responses:
        "200":
          description: | 
            Return the WebChart object
          
            - Time-series of (timestamp, value) array
            
            - Metadata like help links

          content:
            application/json:
              schema:
                type: object

        "422":
          description: |
          
            Unexpected error - usually an internal error

          content:
            application/json:
              schema:
                type: object

  '/file':
    x-pyramid-route-name: web_file
    get:
      operationId: web_file
      summary: |
        
        Serve various files related to the trading strategy and its backtest.
        
        These files are static in nature and are not supposed to change for 
        the duration of trade-executor life time.

      parameters:
        - name: type
          in: query
          description: |

          required: true
          schema:
            type: string
            enum: [html, notebook]

      responses:
        "200":
          description: | 
            Return the asked file.  

        "422":
          description: |
          
            Unexpected error - usually an internal error

          content:
            application/json:
              schema:
                type: object


  '/icon':
    x-pyramid-route-name: web_icon
    get:
      operationId: web_icon
      summary: |
        
        Serve various icons as image files related to the trade executor.
        
        By the default, render the round avatar icon used on the strategy listing page.

      responses:
        "200":
          description: | 
            Return the asked image file.  

        "422":
          description: |
          
            Unexpected error - usually an internal error

          content:
            application/json:
              schema:
                type: object

  '/chart-registry/render':
    x-pyramid-route-name: web_chart_render
    get:
      operationId: web_chart_render
      summary: |
        
        Render charts provided by the strategy and registered in the chart registry.
        
        Return HTML, PNG or SVG  payload.

      parameters:
        - name: chart_id
          in: query
          description: |
            Chart id to render

          required: true
          schema:
            type: string

        - name: pair_ids
          in: query
          description: |
            For charts that have one or multiple pairs as input.

          required: False
          schema:
            type: string

      responses:
        "200":
          description: | 
            Return HTML, PNG or SVG payload of the chart.

          content:
            application/json:
              schema:
                type: object

        "422":
          description: |
          
            Unexpected error - usually an internal error

          content:
            application/json:
              schema:
                type: object

  '/chart-registry':
    x-pyramid-route-name: web_chart_registry
    get:
      operationId: web_chart_registry
      summary: |
        
        List of charts provided by this strategy.
        
        Discover what you can fetch through /chart-registry/render endpoint.

      responses:
        "200":
          description: | 
            Return the asked image file.  

        "422":
          description: |
          
            Unexpected error - usually an internal error

          content:
            application/json:
              schema:
                type: object


components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

# Declare HTTP Basic Auth protection over the whole API
# https://swagger.io/docs/specification/authentication/basic-authentication/
security:
  - basicAuth: []